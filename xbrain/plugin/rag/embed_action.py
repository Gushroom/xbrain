from pymilvus import MilvusClient, FieldSchema, CollectionSchema, DataType
from pydantic import BaseModel, Field
from typing import ClassVar, Optional, List, Dict
from xbrain.core import xbrain_tool
from xbrain.utils.translations import _
from xbrain.utils.openai_utils import generate_embedding
from xbrain.utils.file_utils import extract_text, split_text
import uuid
import os
import logging

logger = logging.getLogger(__name__)

os.makedirs('./.vsdb/', exist_ok=True)
client = MilvusClient("./.vsdb/xbrain_milvus.db")
# client.create_collection(
#     collection_name="collection",
#     dimension=384 # match dimension from embedding model
# )

# Define the schema with fields
id_field = FieldSchema(name="id", dtype=DataType.INT64, is_primary=True, auto_id=True)
embedding_field = FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=384)
text_field = FieldSchema(name="text", dtype=DataType.VARCHAR, max_length=10000)
metadata_field = FieldSchema(name="metadata", dtype=DataType.VARCHAR, max_length=255)

schema = CollectionSchema(fields=[id_field, embedding_field, text_field, metadata_field])

# Create the collection with the specified schema
client.create_collection(
    collection_name="collection",
    schema=schema
)

def save_to_db(chunks: list, embeddings: list, metadata: list):
    """
    Save the text and embedding to the database
    chunk is the original text generated by split_text
    each chunk has its unique embedding, they are parallel lists
    metadata is name of the text file
    we can add more fields in the future
    there could be multiple chunks with the same metadata
    """
    data = []
    for i in range(len(chunks)):
        data.append({
            'text': chunks[i],
            'embedding': embeddings[i], 
            'metadata': metadata
        })
    res = client.insert(collection_name="collection", data=data)
    logger.info(res)

class XBrainEmbed(BaseModel):
    '''Stores embedding of text into vectorstore database'''
    description: ClassVar[str] = _("Stores embedding of text into vectorstore database")
    
    path: str = Field(
        description="path to file or directory of files that needs to be embedded and stored."
    )

@xbrain_tool.Tool(model=XBrainEmbed)
def embedding_action(path: str):
    # can easily expand to list, just provide a folder with text to embed
    input_data: dict = extract_text(path)
    input_text = input_data.get('content')
    metadata = input_data.get('filename')
    chunks = split_text(input_text)
    embeddings = []
    for chunk in chunks:
        embeddings.append(generate_embedding(chunk))
    save_to_db(chunks, embeddings, metadata)

    print(f"Saved embedding for file {path}")  

